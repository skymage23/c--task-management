Prompt:
If I version task-local variables (which I am considering), interrupting the task becomes possible because then I can just have the task revert to an earlier "variable-struct" (probably not literally a struct) version and re-run the iteration. Still, I am not sure I want to support interrupting the tasks.

Answer:
Versioning task-local variables is an interesting and advanced design choice that opens up possibilities like safe task interruption, rollback, and speculative execution. However, it also introduces additional complexity, such as:

    State Management Overhead:
        Tracking, storing, and reverting states can add memory and computational overhead.
        You'd need a robust mechanism to manage snapshots of task-local variables efficiently.

    Concurrency Concerns:
        If tasks share any resources, reverting a task's local state might not account for changes in shared resources, leading to inconsistencies.

    Testing and Debugging:
        Introducing such a system requires rigorous testing to ensure that state rollbacks don't introduce subtle bugs.

To Interrupt or Not to Interrupt?

Supporting task interruption has its benefits and challenges:

    Pros:
        Enables immediate response to critical events like signals.
        Makes your system more flexible and adaptable to dynamic conditions.
    Cons:
        Adds complexity to the task execution model.
        Increases the risk of unexpected side effects, especially when rolling back state.

If your primary focus is simplicity and robustness, deferring task interruption in favor of cooperative handling (e.g., checking messages or signals during safe points) is often the better choice. Task-local versioning can still be useful for debugging or enhancing resilience without needing to fully support interruptions.

